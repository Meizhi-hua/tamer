graph {
	node [shape=box]
	rankdir=LR
	S [label="Clone Pairs"]
	A0 [label="4. if (!password.equals(\"Mew!\")) {\l5.     return(0);\l6. }\l" color=blue]
	B0 [label="4. if (!password.equals(\"Mew!\")) {\l5.     return(0);\l6. }\l" color=blue]
	S -- A0
	A0 -- B0 [label="100%" color=blue style=dashed]
	A1 [label="4. if (!password.equals(\"Mew!\")) {\l5.     return(0);\l6. }\l" color=green]
	B1 [label="31. if (valueString.length() != 0 && valueString.startsWith(\"/etc/\")) {\l32.     DefaultSession.aheyQuarrel.println(\"Access Denied.	Attempt to access a restricted file in \"/etc\".\");\l33. } \l34. else {\l35.     Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\l36.     java.io.File readPath = new java.io.File(valueString);\l37.     if (readPath.isFile()) {\l38.         try {\l39.             Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\l40.             java.io.FileInputStream fis = new java.io.FileInputStream(\l41.                     readPath);\l42.             reader = new java.io.BufferedReader(\l43.                     new java.io.InputStreamReader(fis));\l44.             String line = null;\l45.             while ((line = reader.readLine()) != null) {\l46.                 DefaultSession.aheyQuarrel.println(line);\l47.             }\l48.             Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\l49.         } \l50.         catch (java.io.FileNotFoundException e) {\l51.             Tracer.tracepointError(e.getClass().getName() + \": \"\l52.                     + e.getMessage());\l53.             DefaultSession.aheyQuarrel.printf(\l54.                     \"File \"%s\" does not exist\n\", readPath.getPath());\l55.         } \l56.         catch (java.io.IOException ioe) {\l57.             Tracer.tracepointError(ioe.getClass().getName() + \": \"\l58.                     + ioe.getMessage());\l59.             DefaultSession.aheyQuarrel.println(\"Failed to read file.\");\l60.         } \l61.         finally {\l62.             try {\l63.                 if (reader != null) {\l64.                     reader.close();\l65.                 }\l66.             } catch (java.io.IOException e) {\l67.                 DefaultSession.aheyQuarrel\l68.                         .println(\"STONESOUP: Closing file quietly.\");\l69.             }\l70.         }\l71.     } else {\l72.         Tracer.tracepointMessage(\"File doesn't exist\");\l73.         DefaultSession.aheyQuarrel.printf(\l74.                 \"File \"%s\" does not exist\n\", readPath.getPath());\l75.     }\l76. }\l" color=green]
	S -- A1
	A1 -- B1 [label="3%" color=green style=dashed]
	A2 [label="4. if (!password.equals(\"Mew!\")) {\l5.     return(0);\l6. }\l" color=black]
	B2 [label="83. 		if (location != 0) {\l84. 			Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\l85. 			String substring;\l86. 			try {\l87. 				Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\l88. 				substring = overregularly_mandelic[17].substring(location);\l89. 				Tracer.tracepointVariableString(\"substring\", substring);\l90. 				Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\l91. 			} \l92.             catch (RuntimeException e) {\l93. 				Tracer.tracepointError(e.getClass().getName() + \": \" + e.getMessage());\l94. 				e.printStackTrace(PropertiesModule.cubomancyTetradic);\l95. 				throw e;\l96. 			}\l97.         }\l" color=black]
	S -- A2
	A2 -- B2 [label="9%" color=black style=dashed]
	A3 [label="31. if (valueString.length() != 0 && valueString.startsWith(\"/etc/\")) {\l32.     DefaultSession.aheyQuarrel.println(\"Access Denied.	Attempt to access a restricted file in \"/etc\".\");\l33. } \l34. else {\l35.     Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\l36.     java.io.File readPath = new java.io.File(valueString);\l37.     if (readPath.isFile()) {\l38.         try {\l39.             Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\l40.             java.io.FileInputStream fis = new java.io.FileInputStream(\l41.                     readPath);\l42.             reader = new java.io.BufferedReader(\l43.                     new java.io.InputStreamReader(fis));\l44.             String line = null;\l45.             while ((line = reader.readLine()) != null) {\l46.                 DefaultSession.aheyQuarrel.println(line);\l47.             }\l48.             Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\l49.         } \l50.         catch (java.io.FileNotFoundException e) {\l51.             Tracer.tracepointError(e.getClass().getName() + \": \"\l52.                     + e.getMessage());\l53.             DefaultSession.aheyQuarrel.printf(\l54.                     \"File \"%s\" does not exist\n\", readPath.getPath());\l55.         } \l56.         catch (java.io.IOException ioe) {\l57.             Tracer.tracepointError(ioe.getClass().getName() + \": \"\l58.                     + ioe.getMessage());\l59.             DefaultSession.aheyQuarrel.println(\"Failed to read file.\");\l60.         } \l61.         finally {\l62.             try {\l63.                 if (reader != null) {\l64.                     reader.close();\l65.                 }\l66.             } catch (java.io.IOException e) {\l67.                 DefaultSession.aheyQuarrel\l68.                         .println(\"STONESOUP: Closing file quietly.\");\l69.             }\l70.         }\l71.     } else {\l72.         Tracer.tracepointMessage(\"File doesn't exist\");\l73.         DefaultSession.aheyQuarrel.printf(\l74.                 \"File \"%s\" does not exist\n\", readPath.getPath());\l75.     }\l76. }\l" color=red]
	B3 [label="4. if (!password.equals(\"Mew!\")) {\l5.     return(0);\l6. }\l" color=red]
	S -- A3
	A3 -- B3 [label="3%" color=red style=dashed]
	A4 [label="31. if (valueString.length() != 0 && valueString.startsWith(\"/etc/\")) {\l32.     DefaultSession.aheyQuarrel.println(\"Access Denied.	Attempt to access a restricted file in \"/etc\".\");\l33. } \l34. else {\l35.     Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\l36.     java.io.File readPath = new java.io.File(valueString);\l37.     if (readPath.isFile()) {\l38.         try {\l39.             Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\l40.             java.io.FileInputStream fis = new java.io.FileInputStream(\l41.                     readPath);\l42.             reader = new java.io.BufferedReader(\l43.                     new java.io.InputStreamReader(fis));\l44.             String line = null;\l45.             while ((line = reader.readLine()) != null) {\l46.                 DefaultSession.aheyQuarrel.println(line);\l47.             }\l48.             Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\l49.         } \l50.         catch (java.io.FileNotFoundException e) {\l51.             Tracer.tracepointError(e.getClass().getName() + \": \"\l52.                     + e.getMessage());\l53.             DefaultSession.aheyQuarrel.printf(\l54.                     \"File \"%s\" does not exist\n\", readPath.getPath());\l55.         } \l56.         catch (java.io.IOException ioe) {\l57.             Tracer.tracepointError(ioe.getClass().getName() + \": \"\l58.                     + ioe.getMessage());\l59.             DefaultSession.aheyQuarrel.println(\"Failed to read file.\");\l60.         } \l61.         finally {\l62.             try {\l63.                 if (reader != null) {\l64.                     reader.close();\l65.                 }\l66.             } catch (java.io.IOException e) {\l67.                 DefaultSession.aheyQuarrel\l68.                         .println(\"STONESOUP: Closing file quietly.\");\l69.             }\l70.         }\l71.     } else {\l72.         Tracer.tracepointMessage(\"File doesn't exist\");\l73.         DefaultSession.aheyQuarrel.printf(\l74.                 \"File \"%s\" does not exist\n\", readPath.getPath());\l75.     }\l76. }\l" color=yellow]
	B4 [label="31. if (valueString.length() != 0 && valueString.startsWith(\"/etc/\")) {\l32.     DefaultSession.aheyQuarrel.println(\"Access Denied.	Attempt to access a restricted file in \"/etc\".\");\l33. } \l34. else {\l35.     Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\l36.     java.io.File readPath = new java.io.File(valueString);\l37.     if (readPath.isFile()) {\l38.         try {\l39.             Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\l40.             java.io.FileInputStream fis = new java.io.FileInputStream(\l41.                     readPath);\l42.             reader = new java.io.BufferedReader(\l43.                     new java.io.InputStreamReader(fis));\l44.             String line = null;\l45.             while ((line = reader.readLine()) != null) {\l46.                 DefaultSession.aheyQuarrel.println(line);\l47.             }\l48.             Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\l49.         } \l50.         catch (java.io.FileNotFoundException e) {\l51.             Tracer.tracepointError(e.getClass().getName() + \": \"\l52.                     + e.getMessage());\l53.             DefaultSession.aheyQuarrel.printf(\l54.                     \"File \"%s\" does not exist\n\", readPath.getPath());\l55.         } \l56.         catch (java.io.IOException ioe) {\l57.             Tracer.tracepointError(ioe.getClass().getName() + \": \"\l58.                     + ioe.getMessage());\l59.             DefaultSession.aheyQuarrel.println(\"Failed to read file.\");\l60.         } \l61.         finally {\l62.             try {\l63.                 if (reader != null) {\l64.                     reader.close();\l65.                 }\l66.             } catch (java.io.IOException e) {\l67.                 DefaultSession.aheyQuarrel\l68.                         .println(\"STONESOUP: Closing file quietly.\");\l69.             }\l70.         }\l71.     } else {\l72.         Tracer.tracepointMessage(\"File doesn't exist\");\l73.         DefaultSession.aheyQuarrel.printf(\l74.                 \"File \"%s\" does not exist\n\", readPath.getPath());\l75.     }\l76. }\l" color=yellow]
	S -- A4
	A4 -- B4 [label="100%" color=yellow style=dashed]
	A5 [label="31. if (valueString.length() != 0 && valueString.startsWith(\"/etc/\")) {\l32.     DefaultSession.aheyQuarrel.println(\"Access Denied.	Attempt to access a restricted file in \"/etc\".\");\l33. } \l34. else {\l35.     Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\l36.     java.io.File readPath = new java.io.File(valueString);\l37.     if (readPath.isFile()) {\l38.         try {\l39.             Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\l40.             java.io.FileInputStream fis = new java.io.FileInputStream(\l41.                     readPath);\l42.             reader = new java.io.BufferedReader(\l43.                     new java.io.InputStreamReader(fis));\l44.             String line = null;\l45.             while ((line = reader.readLine()) != null) {\l46.                 DefaultSession.aheyQuarrel.println(line);\l47.             }\l48.             Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\l49.         } \l50.         catch (java.io.FileNotFoundException e) {\l51.             Tracer.tracepointError(e.getClass().getName() + \": \"\l52.                     + e.getMessage());\l53.             DefaultSession.aheyQuarrel.printf(\l54.                     \"File \"%s\" does not exist\n\", readPath.getPath());\l55.         } \l56.         catch (java.io.IOException ioe) {\l57.             Tracer.tracepointError(ioe.getClass().getName() + \": \"\l58.                     + ioe.getMessage());\l59.             DefaultSession.aheyQuarrel.println(\"Failed to read file.\");\l60.         } \l61.         finally {\l62.             try {\l63.                 if (reader != null) {\l64.                     reader.close();\l65.                 }\l66.             } catch (java.io.IOException e) {\l67.                 DefaultSession.aheyQuarrel\l68.                         .println(\"STONESOUP: Closing file quietly.\");\l69.             }\l70.         }\l71.     } else {\l72.         Tracer.tracepointMessage(\"File doesn't exist\");\l73.         DefaultSession.aheyQuarrel.printf(\l74.                 \"File \"%s\" does not exist\n\", readPath.getPath());\l75.     }\l76. }\l" color=blue]
	B5 [label="83. 		if (location != 0) {\l84. 			Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\l85. 			String substring;\l86. 			try {\l87. 				Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\l88. 				substring = overregularly_mandelic[17].substring(location);\l89. 				Tracer.tracepointVariableString(\"substring\", substring);\l90. 				Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\l91. 			} \l92.             catch (RuntimeException e) {\l93. 				Tracer.tracepointError(e.getClass().getName() + \": \" + e.getMessage());\l94. 				e.printStackTrace(PropertiesModule.cubomancyTetradic);\l95. 				throw e;\l96. 			}\l97.         }\l" color=blue]
	S -- A5
	A5 -- B5 [label="32%" color=blue style=dashed]
	A6 [label="83. 		if (location != 0) {\l84. 			Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\l85. 			String substring;\l86. 			try {\l87. 				Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\l88. 				substring = overregularly_mandelic[17].substring(location);\l89. 				Tracer.tracepointVariableString(\"substring\", substring);\l90. 				Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\l91. 			} \l92.             catch (RuntimeException e) {\l93. 				Tracer.tracepointError(e.getClass().getName() + \": \" + e.getMessage());\l94. 				e.printStackTrace(PropertiesModule.cubomancyTetradic);\l95. 				throw e;\l96. 			}\l97.         }\l" color=green]
	B6 [label="4. if (!password.equals(\"Mew!\")) {\l5.     return(0);\l6. }\l" color=green]
	S -- A6
	A6 -- B6 [label="9%" color=green style=dashed]
	A7 [label="83. 		if (location != 0) {\l84. 			Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\l85. 			String substring;\l86. 			try {\l87. 				Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\l88. 				substring = overregularly_mandelic[17].substring(location);\l89. 				Tracer.tracepointVariableString(\"substring\", substring);\l90. 				Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\l91. 			} \l92.             catch (RuntimeException e) {\l93. 				Tracer.tracepointError(e.getClass().getName() + \": \" + e.getMessage());\l94. 				e.printStackTrace(PropertiesModule.cubomancyTetradic);\l95. 				throw e;\l96. 			}\l97.         }\l" color=black]
	B7 [label="31. if (valueString.length() != 0 && valueString.startsWith(\"/etc/\")) {\l32.     DefaultSession.aheyQuarrel.println(\"Access Denied.	Attempt to access a restricted file in \"/etc\".\");\l33. } \l34. else {\l35.     Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\l36.     java.io.File readPath = new java.io.File(valueString);\l37.     if (readPath.isFile()) {\l38.         try {\l39.             Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\l40.             java.io.FileInputStream fis = new java.io.FileInputStream(\l41.                     readPath);\l42.             reader = new java.io.BufferedReader(\l43.                     new java.io.InputStreamReader(fis));\l44.             String line = null;\l45.             while ((line = reader.readLine()) != null) {\l46.                 DefaultSession.aheyQuarrel.println(line);\l47.             }\l48.             Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\l49.         } \l50.         catch (java.io.FileNotFoundException e) {\l51.             Tracer.tracepointError(e.getClass().getName() + \": \"\l52.                     + e.getMessage());\l53.             DefaultSession.aheyQuarrel.printf(\l54.                     \"File \"%s\" does not exist\n\", readPath.getPath());\l55.         } \l56.         catch (java.io.IOException ioe) {\l57.             Tracer.tracepointError(ioe.getClass().getName() + \": \"\l58.                     + ioe.getMessage());\l59.             DefaultSession.aheyQuarrel.println(\"Failed to read file.\");\l60.         } \l61.         finally {\l62.             try {\l63.                 if (reader != null) {\l64.                     reader.close();\l65.                 }\l66.             } catch (java.io.IOException e) {\l67.                 DefaultSession.aheyQuarrel\l68.                         .println(\"STONESOUP: Closing file quietly.\");\l69.             }\l70.         }\l71.     } else {\l72.         Tracer.tracepointMessage(\"File doesn't exist\");\l73.         DefaultSession.aheyQuarrel.printf(\l74.                 \"File \"%s\" does not exist\n\", readPath.getPath());\l75.     }\l76. }\l" color=black]
	S -- A7
	A7 -- B7 [label="32%" color=black style=dashed]
	A8 [label="83. 		if (location != 0) {\l84. 			Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\l85. 			String substring;\l86. 			try {\l87. 				Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\l88. 				substring = overregularly_mandelic[17].substring(location);\l89. 				Tracer.tracepointVariableString(\"substring\", substring);\l90. 				Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\l91. 			} \l92.             catch (RuntimeException e) {\l93. 				Tracer.tracepointError(e.getClass().getName() + \": \" + e.getMessage());\l94. 				e.printStackTrace(PropertiesModule.cubomancyTetradic);\l95. 				throw e;\l96. 			}\l97.         }\l" color=red]
	B8 [label="83. 		if (location != 0) {\l84. 			Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\l85. 			String substring;\l86. 			try {\l87. 				Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\l88. 				substring = overregularly_mandelic[17].substring(location);\l89. 				Tracer.tracepointVariableString(\"substring\", substring);\l90. 				Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\l91. 			} \l92.             catch (RuntimeException e) {\l93. 				Tracer.tracepointError(e.getClass().getName() + \": \" + e.getMessage());\l94. 				e.printStackTrace(PropertiesModule.cubomancyTetradic);\l95. 				throw e;\l96. 			}\l97.         }\l" color=red]
	S -- A8
	A8 -- B8 [label="100%" color=red style=dashed]
	A9 [label="12. try {\l13.     String latlonCoords = coordinates;\l14.     Runtime rt = Runtime.getRuntime(\"cmd.exe /C latlon2utm.exe -\" + latlonCoords);\l15.     Process exec = rt.exec();\l16. }\l17. catch(Exception e) {\l18.     return 0;\l19. }\l" color=yellow]
	B9 [label="12. try {\l13.     String latlonCoords = coordinates;\l14.     Runtime rt = Runtime.getRuntime(\"cmd.exe /C latlon2utm.exe -\" + latlonCoords);\l15.     Process exec = rt.exec();\l16. }\l17. catch(Exception e) {\l18.     return 0;\l19. }\l" color=yellow]
	S -- A9
	A9 -- B9 [label="100%" color=yellow style=dashed]
	A10 [label="12. try {\l13.     String latlonCoords = coordinates;\l14.     Runtime rt = Runtime.getRuntime(\"cmd.exe /C latlon2utm.exe -\" + latlonCoords);\l15.     Process exec = rt.exec();\l16. }\l17. catch(Exception e) {\l18.     return 0;\l19. }\l" color=blue]
	B10 [label="103. try {\l104.     while(threadLock == truthvalue) {\l105.         threadLock=true; \l106.         threadLock=false;\l107.     }\l108. }\l109. catch (Exception e){\l110. System.err.println(\"You did something bad\");\l111. if (something) return truthvalue;\l112. }\l" color=blue]
	S -- A10
	A10 -- B10 [label="33%" color=blue style=dashed]
	A11 [label="12. try {\l13.     String latlonCoords = coordinates;\l14.     Runtime rt = Runtime.getRuntime(\"cmd.exe /C latlon2utm.exe -\" + latlonCoords);\l15.     Process exec = rt.exec();\l16. }\l17. catch(Exception e) {\l18.     return 0;\l19. }\l" color=green]
	B11 [label="119. try {\l120.     int value = Integer.parseInt(val);\l121. }\l122. catch (NumberFormatException e) {\l123.     log.info(\"Failed to parse val = \" + val);\l124. }\l" color=green]
	S -- A11
	A11 -- B11 [label="40%" color=green style=dashed]
	A12 [label="103. try {\l104.     while(threadLock == truthvalue) {\l105.         threadLock=true; \l106.         threadLock=false;\l107.     }\l108. }\l109. catch (Exception e){\l110. System.err.println(\"You did something bad\");\l111. if (something) return truthvalue;\l112. }\l" color=black]
	B12 [label="12. try {\l13.     String latlonCoords = coordinates;\l14.     Runtime rt = Runtime.getRuntime(\"cmd.exe /C latlon2utm.exe -\" + latlonCoords);\l15.     Process exec = rt.exec();\l16. }\l17. catch(Exception e) {\l18.     return 0;\l19. }\l" color=black]
	S -- A12
	A12 -- B12 [label="33%" color=black style=dashed]
	A13 [label="103. try {\l104.     while(threadLock == truthvalue) {\l105.         threadLock=true; \l106.         threadLock=false;\l107.     }\l108. }\l109. catch (Exception e){\l110. System.err.println(\"You did something bad\");\l111. if (something) return truthvalue;\l112. }\l" color=red]
	B13 [label="103. try {\l104.     while(threadLock == truthvalue) {\l105.         threadLock=true; \l106.         threadLock=false;\l107.     }\l108. }\l109. catch (Exception e){\l110. System.err.println(\"You did something bad\");\l111. if (something) return truthvalue;\l112. }\l" color=red]
	S -- A13
	A13 -- B13 [label="100%" color=red style=dashed]
	A14 [label="103. try {\l104.     while(threadLock == truthvalue) {\l105.         threadLock=true; \l106.         threadLock=false;\l107.     }\l108. }\l109. catch (Exception e){\l110. System.err.println(\"You did something bad\");\l111. if (something) return truthvalue;\l112. }\l" color=yellow]
	B14 [label="119. try {\l120.     int value = Integer.parseInt(val);\l121. }\l122. catch (NumberFormatException e) {\l123.     log.info(\"Failed to parse val = \" + val);\l124. }\l" color=yellow]
	S -- A14
	A14 -- B14 [label="49%" color=yellow style=dashed]
	A15 [label="119. try {\l120.     int value = Integer.parseInt(val);\l121. }\l122. catch (NumberFormatException e) {\l123.     log.info(\"Failed to parse val = \" + val);\l124. }\l" color=blue]
	B15 [label="12. try {\l13.     String latlonCoords = coordinates;\l14.     Runtime rt = Runtime.getRuntime(\"cmd.exe /C latlon2utm.exe -\" + latlonCoords);\l15.     Process exec = rt.exec();\l16. }\l17. catch(Exception e) {\l18.     return 0;\l19. }\l" color=blue]
	S -- A15
	A15 -- B15 [label="40%" color=blue style=dashed]
	A16 [label="119. try {\l120.     int value = Integer.parseInt(val);\l121. }\l122. catch (NumberFormatException e) {\l123.     log.info(\"Failed to parse val = \" + val);\l124. }\l" color=green]
	B16 [label="103. try {\l104.     while(threadLock == truthvalue) {\l105.         threadLock=true; \l106.         threadLock=false;\l107.     }\l108. }\l109. catch (Exception e){\l110. System.err.println(\"You did something bad\");\l111. if (something) return truthvalue;\l112. }\l" color=green]
	S -- A16
	A16 -- B16 [label="49%" color=green style=dashed]
	A17 [label="119. try {\l120.     int value = Integer.parseInt(val);\l121. }\l122. catch (NumberFormatException e) {\l123.     log.info(\"Failed to parse val = \" + val);\l124. }\l" color=black]
	B17 [label="119. try {\l120.     int value = Integer.parseInt(val);\l121. }\l122. catch (NumberFormatException e) {\l123.     log.info(\"Failed to parse val = \" + val);\l124. }\l" color=black]
	S -- A17
	A17 -- B17 [label="100%" color=black style=dashed]
}
