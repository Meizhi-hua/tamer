graph {
	node [shape=box]
	rankdir=LR
	S [label="Clone Pairs"]
	A0 [label="27. if (a == 1 && b == 2)\l28. {\l29.     return true;\l30. }\l31. else\l32. {\l33.     return false;\l34. }\l" color=blue]
	B0 [label="29. if (p == 1 && q == 2)\l30. {\l31.     return true;\l32. }\l33. else\l34. {\l35.     return false;\l36. }\l" color=blue]
	S -- A0
	A0 -- B0 [label="100%" color=blue style=dashed]
	A1 [label="12. for (int i = 0; i < word.length(); i++) {\l13.     char ch = word.charAt(i);\l14.     int index = ch - 'a';\l15.     if (node.children[index] == null) {\l16.         node.children[index] = new Trie();\l17.     }\l18.     node = node.children[index];\l19. }\l" color=green]
	B1 [label="10. for(int i = 0;i < word.length();i ++)\l11. {\l12.     int u = word.charAt(i) - 'a';\l13.     if(p.son[u] == null) p.son[u] = new Node();\l14.     p = p.son[u]; \l15. }\l" color=green]
	S -- A1
	A1 -- B1 [label="86%" color=green style=dashed]
	A2 [label="12. for (int i = 0; i < word.length(); i++) {\l13.     char ch = word.charAt(i);\l14.     int index = ch - 'a';\l15.     if (node.children[index] == null) {\l16.         node.children[index] = new Trie();\l17.     }\l18.     node = node.children[index];\l19. }\l" color=black]
	B2 [label="21. for(int i = 0;i < word.length();i ++)\l22. {\l23.     int u = word.charAt(i) - 'a';\l24.     if(p.son[u] == null) return false;\l25.     p = p.son[u]; \l26. }\l" color=black]
	S -- A2
	A2 -- B2 [label="68%" color=black style=dashed]
	A3 [label="12. for (int i = 0; i < word.length(); i++) {\l13.     char ch = word.charAt(i);\l14.     int index = ch - 'a';\l15.     if (node.children[index] == null) {\l16.         node.children[index] = new Trie();\l17.     }\l18.     node = node.children[index];\l19. }\l" color=red]
	B3 [label="43. for(int i = 0;i < prefix.length();i ++)\l44. {\l45.     int u = prefix.charAt(i) - 'a';\l46.     if(p.son[u] == null) return false;\l47.     p = p.son[u]; \l48. }\l" color=red]
	S -- A3
	A3 -- B3 [label="68%" color=red style=dashed]
	A4 [label="12. for (int i = 0; i < word.length(); i++) {\l13.     char ch = word.charAt(i);\l14.     int index = ch - 'a';\l15.     if (node.children[index] == null) {\l16.         node.children[index] = new Trie();\l17.     }\l18.     node = node.children[index];\l19. }\l" color=yellow]
	B4 [label="59. for(int i = 0;i < 26;i ++)\l60.     son[i] = null;\l" color=yellow]
	S -- A4
	A4 -- B4 [label="26%" color=yellow style=dashed]
	A5 [label="41. for (int i = 0; i < prefix.length(); i++) {\l42.     char ch = prefix.charAt(i);\l43.     int index = ch - 'a';\l44.     if (node.children[index] == null) {\l45.         return null;\l46.     }\l47.     node = node.children[index];\l48. }\l" color=blue]
	B5 [label="10. for(int i = 0;i < word.length();i ++)\l11. {\l12.     int u = word.charAt(i) - 'a';\l13.     if(p.son[u] == null) p.son[u] = new Node();\l14.     p = p.son[u]; \l15. }\l" color=blue]
	S -- A5
	A5 -- B5 [label="68%" color=blue style=dashed]
	A6 [label="41. for (int i = 0; i < prefix.length(); i++) {\l42.     char ch = prefix.charAt(i);\l43.     int index = ch - 'a';\l44.     if (node.children[index] == null) {\l45.         return null;\l46.     }\l47.     node = node.children[index];\l48. }\l" color=green]
	B6 [label="21. for(int i = 0;i < word.length();i ++)\l22. {\l23.     int u = word.charAt(i) - 'a';\l24.     if(p.son[u] == null) return false;\l25.     p = p.son[u]; \l26. }\l" color=green]
	S -- A6
	A6 -- B6 [label="81%" color=green style=dashed]
	A7 [label="41. for (int i = 0; i < prefix.length(); i++) {\l42.     char ch = prefix.charAt(i);\l43.     int index = ch - 'a';\l44.     if (node.children[index] == null) {\l45.         return null;\l46.     }\l47.     node = node.children[index];\l48. }\l" color=black]
	B7 [label="43. for(int i = 0;i < prefix.length();i ++)\l44. {\l45.     int u = prefix.charAt(i) - 'a';\l46.     if(p.son[u] == null) return false;\l47.     p = p.son[u]; \l48. }\l" color=black]
	S -- A7
	A7 -- B7 [label="81%" color=black style=dashed]
	A8 [label="41. for (int i = 0; i < prefix.length(); i++) {\l42.     char ch = prefix.charAt(i);\l43.     int index = ch - 'a';\l44.     if (node.children[index] == null) {\l45.         return null;\l46.     }\l47.     node = node.children[index];\l48. }\l" color=red]
	B8 [label="59. for(int i = 0;i < 26;i ++)\l60.     son[i] = null;\l" color=red]
	S -- A8
	A8 -- B8 [label="30%" color=red style=dashed]
}
