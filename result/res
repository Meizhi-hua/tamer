95%
src
6. for (int i = 0; i < am; i++) {
7.     for (int j = 0; j < an; j++) {
8.         result[j][i] = a[i][j];
9.     }
10. }
dst
7. for (int i = 0; i < nsol; i++) {
8.     for (int j = 0; j < ntp; j++) {
9.         int2[i][j] = mtx[j][i];
10.     }
11. }
52%
src
6. for (int i = 0; i < am; i++) {
7.     for (int j = 0; j < an; j++) {
8.         result[j][i] = a[i][j];
9.     }
10. }
dst
12. for (int i = 0; i < nsol; i++) {
13.     for (int j = (i + 1); j < nsol; j++) {
14.         dom[i][j] = (float) checkDominance(int2[i], int2[j]);
15.         if (dom[i][j] == 1) {
16.             dom[j][i] = -1;
17.             dom[i][j] = 0;
18.         }
19.     }
20. }
61%
src
1. public class test {
2.     public static final Object[][] transpose(Object[][] a) {
3.         int am = a.length;
4.         int an = a[0].length;
5.         Object[][] result = new Object[an][am];
6.         for (int i = 0; i < am; i++) {
7.             for (int j = 0; j < an; j++) {
8.                 result[j][i] = a[i][j];
9.             }
10.         }
11.         return result;
12.     }
13. }
dst
1. public class test {
2.     public static float[][] calSolDominance() {
3.         int ntp = mtx.length;
4.         int nsol = mtx[0].length;
5.         float[][] dom = new float[nsol][nsol];
6.         float[][] int2 = new float[nsol][ntp];
7.         for (int i = 0; i < nsol; i++) {
8.             for (int j = 0; j < ntp; j++) {
9.                 int2[i][j] = mtx[j][i];
10.             }
11.         }
12.         for (int i = 0; i < nsol; i++) {
13.             for (int j = (i + 1); j < nsol; j++) {
14.                 dom[i][j] = (float) checkDominance(int2[i], int2[j]);
15.                 if (dom[i][j] == 1) {
16.                     dom[j][i] = -1;
17.                     dom[i][j] = 0;
18.                 }
19.             }
20.         }
21.         return (dom);
22.     }
23. }
