100%
src
4. if (!password.equals("Mew!")) {
5.     return(0);
6. }
dst
4. if (!password.equals("Mew!")) {
5.     return(0);
6. }
3%
src
4. if (!password.equals("Mew!")) {
5.     return(0);
6. }
dst
31. if (valueString.length() != 0 && valueString.startsWith("/etc/")) {
32.     DefaultSession.aheyQuarrel.println("Access Denied.	Attempt to access a restricted file in \"/etc\".");
33. } 
34. else {
35.     Tracer.tracepointMessage("CROSSOVER-POINT: AFTER");
36.     java.io.File readPath = new java.io.File(valueString);
37.     if (readPath.isFile()) {
38.         try {
39.             Tracer.tracepointMessage("TRIGGER-POINT: BEFORE");
40.             java.io.FileInputStream fis = new java.io.FileInputStream(
41.                     readPath);
42.             reader = new java.io.BufferedReader(
43.                     new java.io.InputStreamReader(fis));
44.             String line = null;
45.             while ((line = reader.readLine()) != null) {
46.                 DefaultSession.aheyQuarrel.println(line);
47.             }
48.             Tracer.tracepointMessage("TRIGGER-POINT: AFTER");
49.         } 
50.         catch (java.io.FileNotFoundException e) {
51.             Tracer.tracepointError(e.getClass().getName() + ": "
52.                     + e.getMessage());
53.             DefaultSession.aheyQuarrel.printf(
54.                     "File \"%s\" does not exist\n", readPath.getPath());
55.         } 
56.         catch (java.io.IOException ioe) {
57.             Tracer.tracepointError(ioe.getClass().getName() + ": "
58.                     + ioe.getMessage());
59.             DefaultSession.aheyQuarrel.println("Failed to read file.");
60.         } 
61.         finally {
62.             try {
63.                 if (reader != null) {
64.                     reader.close();
65.                 }
66.             } catch (java.io.IOException e) {
67.                 DefaultSession.aheyQuarrel
68.                         .println("STONESOUP: Closing file quietly.");
69.             }
70.         }
71.     } else {
72.         Tracer.tracepointMessage("File doesn't exist");
73.         DefaultSession.aheyQuarrel.printf(
74.                 "File \"%s\" does not exist\n", readPath.getPath());
75.     }
76. }
9%
src
4. if (!password.equals("Mew!")) {
5.     return(0);
6. }
dst
83. 		if (location != 0) {
84. 			Tracer.tracepointMessage("CROSSOVER-POINT: AFTER");
85. 			String substring;
86. 			try {
87. 				Tracer.tracepointMessage("TRIGGER-POINT: BEFORE");
88. 				substring = overregularly_mandelic[17].substring(location);
89. 				Tracer.tracepointVariableString("substring", substring);
90. 				Tracer.tracepointMessage("TRIGGER-POINT: AFTER");
91. 			} 
92.             catch (RuntimeException e) {
93. 				Tracer.tracepointError(e.getClass().getName() + ": " + e.getMessage());
94. 				e.printStackTrace(PropertiesModule.cubomancyTetradic);
95. 				throw e;
96. 			}
97.         }
3%
src
31. if (valueString.length() != 0 && valueString.startsWith("/etc/")) {
32.     DefaultSession.aheyQuarrel.println("Access Denied.	Attempt to access a restricted file in \"/etc\".");
33. } 
34. else {
35.     Tracer.tracepointMessage("CROSSOVER-POINT: AFTER");
36.     java.io.File readPath = new java.io.File(valueString);
37.     if (readPath.isFile()) {
38.         try {
39.             Tracer.tracepointMessage("TRIGGER-POINT: BEFORE");
40.             java.io.FileInputStream fis = new java.io.FileInputStream(
41.                     readPath);
42.             reader = new java.io.BufferedReader(
43.                     new java.io.InputStreamReader(fis));
44.             String line = null;
45.             while ((line = reader.readLine()) != null) {
46.                 DefaultSession.aheyQuarrel.println(line);
47.             }
48.             Tracer.tracepointMessage("TRIGGER-POINT: AFTER");
49.         } 
50.         catch (java.io.FileNotFoundException e) {
51.             Tracer.tracepointError(e.getClass().getName() + ": "
52.                     + e.getMessage());
53.             DefaultSession.aheyQuarrel.printf(
54.                     "File \"%s\" does not exist\n", readPath.getPath());
55.         } 
56.         catch (java.io.IOException ioe) {
57.             Tracer.tracepointError(ioe.getClass().getName() + ": "
58.                     + ioe.getMessage());
59.             DefaultSession.aheyQuarrel.println("Failed to read file.");
60.         } 
61.         finally {
62.             try {
63.                 if (reader != null) {
64.                     reader.close();
65.                 }
66.             } catch (java.io.IOException e) {
67.                 DefaultSession.aheyQuarrel
68.                         .println("STONESOUP: Closing file quietly.");
69.             }
70.         }
71.     } else {
72.         Tracer.tracepointMessage("File doesn't exist");
73.         DefaultSession.aheyQuarrel.printf(
74.                 "File \"%s\" does not exist\n", readPath.getPath());
75.     }
76. }
dst
4. if (!password.equals("Mew!")) {
5.     return(0);
6. }
100%
src
31. if (valueString.length() != 0 && valueString.startsWith("/etc/")) {
32.     DefaultSession.aheyQuarrel.println("Access Denied.	Attempt to access a restricted file in \"/etc\".");
33. } 
34. else {
35.     Tracer.tracepointMessage("CROSSOVER-POINT: AFTER");
36.     java.io.File readPath = new java.io.File(valueString);
37.     if (readPath.isFile()) {
38.         try {
39.             Tracer.tracepointMessage("TRIGGER-POINT: BEFORE");
40.             java.io.FileInputStream fis = new java.io.FileInputStream(
41.                     readPath);
42.             reader = new java.io.BufferedReader(
43.                     new java.io.InputStreamReader(fis));
44.             String line = null;
45.             while ((line = reader.readLine()) != null) {
46.                 DefaultSession.aheyQuarrel.println(line);
47.             }
48.             Tracer.tracepointMessage("TRIGGER-POINT: AFTER");
49.         } 
50.         catch (java.io.FileNotFoundException e) {
51.             Tracer.tracepointError(e.getClass().getName() + ": "
52.                     + e.getMessage());
53.             DefaultSession.aheyQuarrel.printf(
54.                     "File \"%s\" does not exist\n", readPath.getPath());
55.         } 
56.         catch (java.io.IOException ioe) {
57.             Tracer.tracepointError(ioe.getClass().getName() + ": "
58.                     + ioe.getMessage());
59.             DefaultSession.aheyQuarrel.println("Failed to read file.");
60.         } 
61.         finally {
62.             try {
63.                 if (reader != null) {
64.                     reader.close();
65.                 }
66.             } catch (java.io.IOException e) {
67.                 DefaultSession.aheyQuarrel
68.                         .println("STONESOUP: Closing file quietly.");
69.             }
70.         }
71.     } else {
72.         Tracer.tracepointMessage("File doesn't exist");
73.         DefaultSession.aheyQuarrel.printf(
74.                 "File \"%s\" does not exist\n", readPath.getPath());
75.     }
76. }
dst
31. if (valueString.length() != 0 && valueString.startsWith("/etc/")) {
32.     DefaultSession.aheyQuarrel.println("Access Denied.	Attempt to access a restricted file in \"/etc\".");
33. } 
34. else {
35.     Tracer.tracepointMessage("CROSSOVER-POINT: AFTER");
36.     java.io.File readPath = new java.io.File(valueString);
37.     if (readPath.isFile()) {
38.         try {
39.             Tracer.tracepointMessage("TRIGGER-POINT: BEFORE");
40.             java.io.FileInputStream fis = new java.io.FileInputStream(
41.                     readPath);
42.             reader = new java.io.BufferedReader(
43.                     new java.io.InputStreamReader(fis));
44.             String line = null;
45.             while ((line = reader.readLine()) != null) {
46.                 DefaultSession.aheyQuarrel.println(line);
47.             }
48.             Tracer.tracepointMessage("TRIGGER-POINT: AFTER");
49.         } 
50.         catch (java.io.FileNotFoundException e) {
51.             Tracer.tracepointError(e.getClass().getName() + ": "
52.                     + e.getMessage());
53.             DefaultSession.aheyQuarrel.printf(
54.                     "File \"%s\" does not exist\n", readPath.getPath());
55.         } 
56.         catch (java.io.IOException ioe) {
57.             Tracer.tracepointError(ioe.getClass().getName() + ": "
58.                     + ioe.getMessage());
59.             DefaultSession.aheyQuarrel.println("Failed to read file.");
60.         } 
61.         finally {
62.             try {
63.                 if (reader != null) {
64.                     reader.close();
65.                 }
66.             } catch (java.io.IOException e) {
67.                 DefaultSession.aheyQuarrel
68.                         .println("STONESOUP: Closing file quietly.");
69.             }
70.         }
71.     } else {
72.         Tracer.tracepointMessage("File doesn't exist");
73.         DefaultSession.aheyQuarrel.printf(
74.                 "File \"%s\" does not exist\n", readPath.getPath());
75.     }
76. }
32%
src
31. if (valueString.length() != 0 && valueString.startsWith("/etc/")) {
32.     DefaultSession.aheyQuarrel.println("Access Denied.	Attempt to access a restricted file in \"/etc\".");
33. } 
34. else {
35.     Tracer.tracepointMessage("CROSSOVER-POINT: AFTER");
36.     java.io.File readPath = new java.io.File(valueString);
37.     if (readPath.isFile()) {
38.         try {
39.             Tracer.tracepointMessage("TRIGGER-POINT: BEFORE");
40.             java.io.FileInputStream fis = new java.io.FileInputStream(
41.                     readPath);
42.             reader = new java.io.BufferedReader(
43.                     new java.io.InputStreamReader(fis));
44.             String line = null;
45.             while ((line = reader.readLine()) != null) {
46.                 DefaultSession.aheyQuarrel.println(line);
47.             }
48.             Tracer.tracepointMessage("TRIGGER-POINT: AFTER");
49.         } 
50.         catch (java.io.FileNotFoundException e) {
51.             Tracer.tracepointError(e.getClass().getName() + ": "
52.                     + e.getMessage());
53.             DefaultSession.aheyQuarrel.printf(
54.                     "File \"%s\" does not exist\n", readPath.getPath());
55.         } 
56.         catch (java.io.IOException ioe) {
57.             Tracer.tracepointError(ioe.getClass().getName() + ": "
58.                     + ioe.getMessage());
59.             DefaultSession.aheyQuarrel.println("Failed to read file.");
60.         } 
61.         finally {
62.             try {
63.                 if (reader != null) {
64.                     reader.close();
65.                 }
66.             } catch (java.io.IOException e) {
67.                 DefaultSession.aheyQuarrel
68.                         .println("STONESOUP: Closing file quietly.");
69.             }
70.         }
71.     } else {
72.         Tracer.tracepointMessage("File doesn't exist");
73.         DefaultSession.aheyQuarrel.printf(
74.                 "File \"%s\" does not exist\n", readPath.getPath());
75.     }
76. }
dst
83. 		if (location != 0) {
84. 			Tracer.tracepointMessage("CROSSOVER-POINT: AFTER");
85. 			String substring;
86. 			try {
87. 				Tracer.tracepointMessage("TRIGGER-POINT: BEFORE");
88. 				substring = overregularly_mandelic[17].substring(location);
89. 				Tracer.tracepointVariableString("substring", substring);
90. 				Tracer.tracepointMessage("TRIGGER-POINT: AFTER");
91. 			} 
92.             catch (RuntimeException e) {
93. 				Tracer.tracepointError(e.getClass().getName() + ": " + e.getMessage());
94. 				e.printStackTrace(PropertiesModule.cubomancyTetradic);
95. 				throw e;
96. 			}
97.         }
9%
src
83. 		if (location != 0) {
84. 			Tracer.tracepointMessage("CROSSOVER-POINT: AFTER");
85. 			String substring;
86. 			try {
87. 				Tracer.tracepointMessage("TRIGGER-POINT: BEFORE");
88. 				substring = overregularly_mandelic[17].substring(location);
89. 				Tracer.tracepointVariableString("substring", substring);
90. 				Tracer.tracepointMessage("TRIGGER-POINT: AFTER");
91. 			} 
92.             catch (RuntimeException e) {
93. 				Tracer.tracepointError(e.getClass().getName() + ": " + e.getMessage());
94. 				e.printStackTrace(PropertiesModule.cubomancyTetradic);
95. 				throw e;
96. 			}
97.         }
dst
4. if (!password.equals("Mew!")) {
5.     return(0);
6. }
32%
src
83. 		if (location != 0) {
84. 			Tracer.tracepointMessage("CROSSOVER-POINT: AFTER");
85. 			String substring;
86. 			try {
87. 				Tracer.tracepointMessage("TRIGGER-POINT: BEFORE");
88. 				substring = overregularly_mandelic[17].substring(location);
89. 				Tracer.tracepointVariableString("substring", substring);
90. 				Tracer.tracepointMessage("TRIGGER-POINT: AFTER");
91. 			} 
92.             catch (RuntimeException e) {
93. 				Tracer.tracepointError(e.getClass().getName() + ": " + e.getMessage());
94. 				e.printStackTrace(PropertiesModule.cubomancyTetradic);
95. 				throw e;
96. 			}
97.         }
dst
31. if (valueString.length() != 0 && valueString.startsWith("/etc/")) {
32.     DefaultSession.aheyQuarrel.println("Access Denied.	Attempt to access a restricted file in \"/etc\".");
33. } 
34. else {
35.     Tracer.tracepointMessage("CROSSOVER-POINT: AFTER");
36.     java.io.File readPath = new java.io.File(valueString);
37.     if (readPath.isFile()) {
38.         try {
39.             Tracer.tracepointMessage("TRIGGER-POINT: BEFORE");
40.             java.io.FileInputStream fis = new java.io.FileInputStream(
41.                     readPath);
42.             reader = new java.io.BufferedReader(
43.                     new java.io.InputStreamReader(fis));
44.             String line = null;
45.             while ((line = reader.readLine()) != null) {
46.                 DefaultSession.aheyQuarrel.println(line);
47.             }
48.             Tracer.tracepointMessage("TRIGGER-POINT: AFTER");
49.         } 
50.         catch (java.io.FileNotFoundException e) {
51.             Tracer.tracepointError(e.getClass().getName() + ": "
52.                     + e.getMessage());
53.             DefaultSession.aheyQuarrel.printf(
54.                     "File \"%s\" does not exist\n", readPath.getPath());
55.         } 
56.         catch (java.io.IOException ioe) {
57.             Tracer.tracepointError(ioe.getClass().getName() + ": "
58.                     + ioe.getMessage());
59.             DefaultSession.aheyQuarrel.println("Failed to read file.");
60.         } 
61.         finally {
62.             try {
63.                 if (reader != null) {
64.                     reader.close();
65.                 }
66.             } catch (java.io.IOException e) {
67.                 DefaultSession.aheyQuarrel
68.                         .println("STONESOUP: Closing file quietly.");
69.             }
70.         }
71.     } else {
72.         Tracer.tracepointMessage("File doesn't exist");
73.         DefaultSession.aheyQuarrel.printf(
74.                 "File \"%s\" does not exist\n", readPath.getPath());
75.     }
76. }
100%
src
83. 		if (location != 0) {
84. 			Tracer.tracepointMessage("CROSSOVER-POINT: AFTER");
85. 			String substring;
86. 			try {
87. 				Tracer.tracepointMessage("TRIGGER-POINT: BEFORE");
88. 				substring = overregularly_mandelic[17].substring(location);
89. 				Tracer.tracepointVariableString("substring", substring);
90. 				Tracer.tracepointMessage("TRIGGER-POINT: AFTER");
91. 			} 
92.             catch (RuntimeException e) {
93. 				Tracer.tracepointError(e.getClass().getName() + ": " + e.getMessage());
94. 				e.printStackTrace(PropertiesModule.cubomancyTetradic);
95. 				throw e;
96. 			}
97.         }
dst
83. 		if (location != 0) {
84. 			Tracer.tracepointMessage("CROSSOVER-POINT: AFTER");
85. 			String substring;
86. 			try {
87. 				Tracer.tracepointMessage("TRIGGER-POINT: BEFORE");
88. 				substring = overregularly_mandelic[17].substring(location);
89. 				Tracer.tracepointVariableString("substring", substring);
90. 				Tracer.tracepointMessage("TRIGGER-POINT: AFTER");
91. 			} 
92.             catch (RuntimeException e) {
93. 				Tracer.tracepointError(e.getClass().getName() + ": " + e.getMessage());
94. 				e.printStackTrace(PropertiesModule.cubomancyTetradic);
95. 				throw e;
96. 			}
97.         }
100%
src
12. try {
13.     String latlonCoords = coordinates;
14.     Runtime rt = Runtime.getRuntime("cmd.exe /C latlon2utm.exe -" + latlonCoords);
15.     Process exec = rt.exec();
16. }
17. catch(Exception e) {
18.     return 0;
19. }
dst
12. try {
13.     String latlonCoords = coordinates;
14.     Runtime rt = Runtime.getRuntime("cmd.exe /C latlon2utm.exe -" + latlonCoords);
15.     Process exec = rt.exec();
16. }
17. catch(Exception e) {
18.     return 0;
19. }
33%
src
12. try {
13.     String latlonCoords = coordinates;
14.     Runtime rt = Runtime.getRuntime("cmd.exe /C latlon2utm.exe -" + latlonCoords);
15.     Process exec = rt.exec();
16. }
17. catch(Exception e) {
18.     return 0;
19. }
dst
103. try {
104.     while(threadLock == truthvalue) {
105.         threadLock=true; 
106.         threadLock=false;
107.     }
108. }
109. catch (Exception e){
110. System.err.println("You did something bad");
111. if (something) return truthvalue;
112. }
40%
src
12. try {
13.     String latlonCoords = coordinates;
14.     Runtime rt = Runtime.getRuntime("cmd.exe /C latlon2utm.exe -" + latlonCoords);
15.     Process exec = rt.exec();
16. }
17. catch(Exception e) {
18.     return 0;
19. }
dst
119. try {
120.     int value = Integer.parseInt(val);
121. }
122. catch (NumberFormatException e) {
123.     log.info("Failed to parse val = " + val);
124. }
33%
src
103. try {
104.     while(threadLock == truthvalue) {
105.         threadLock=true; 
106.         threadLock=false;
107.     }
108. }
109. catch (Exception e){
110. System.err.println("You did something bad");
111. if (something) return truthvalue;
112. }
dst
12. try {
13.     String latlonCoords = coordinates;
14.     Runtime rt = Runtime.getRuntime("cmd.exe /C latlon2utm.exe -" + latlonCoords);
15.     Process exec = rt.exec();
16. }
17. catch(Exception e) {
18.     return 0;
19. }
100%
src
103. try {
104.     while(threadLock == truthvalue) {
105.         threadLock=true; 
106.         threadLock=false;
107.     }
108. }
109. catch (Exception e){
110. System.err.println("You did something bad");
111. if (something) return truthvalue;
112. }
dst
103. try {
104.     while(threadLock == truthvalue) {
105.         threadLock=true; 
106.         threadLock=false;
107.     }
108. }
109. catch (Exception e){
110. System.err.println("You did something bad");
111. if (something) return truthvalue;
112. }
49%
src
103. try {
104.     while(threadLock == truthvalue) {
105.         threadLock=true; 
106.         threadLock=false;
107.     }
108. }
109. catch (Exception e){
110. System.err.println("You did something bad");
111. if (something) return truthvalue;
112. }
dst
119. try {
120.     int value = Integer.parseInt(val);
121. }
122. catch (NumberFormatException e) {
123.     log.info("Failed to parse val = " + val);
124. }
40%
src
119. try {
120.     int value = Integer.parseInt(val);
121. }
122. catch (NumberFormatException e) {
123.     log.info("Failed to parse val = " + val);
124. }
dst
12. try {
13.     String latlonCoords = coordinates;
14.     Runtime rt = Runtime.getRuntime("cmd.exe /C latlon2utm.exe -" + latlonCoords);
15.     Process exec = rt.exec();
16. }
17. catch(Exception e) {
18.     return 0;
19. }
49%
src
119. try {
120.     int value = Integer.parseInt(val);
121. }
122. catch (NumberFormatException e) {
123.     log.info("Failed to parse val = " + val);
124. }
dst
103. try {
104.     while(threadLock == truthvalue) {
105.         threadLock=true; 
106.         threadLock=false;
107.     }
108. }
109. catch (Exception e){
110. System.err.println("You did something bad");
111. if (something) return truthvalue;
112. }
100%
src
119. try {
120.     int value = Integer.parseInt(val);
121. }
122. catch (NumberFormatException e) {
123.     log.info("Failed to parse val = " + val);
124. }
dst
119. try {
120.     int value = Integer.parseInt(val);
121. }
122. catch (NumberFormatException e) {
123.     log.info("Failed to parse val = " + val);
124. }
