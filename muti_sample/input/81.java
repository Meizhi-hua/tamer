public class JarSplit {
    private static Vector<String>[] classlist = (Vector<String>[])(new Vector[2]);
    private static String[] fileNamelist = new String[2];
    private static void printUsage() {
        String help =
            "Usage:  java JarSplit classlist -o <class file list> <non-class file list> \n"
            + " This class takes a class list generated by JarReorder or some other tools \n"
            + "  and outputs two files which contain class file list and non-class file list.\n"
            + " Example: java JarSplit classlist -o classlist nonClasslist \n";
        System.err.println(help);
        System.exit(1);
    }
    public static void main(String[] args) {
        int arglen = args.length;
        if (arglen < 4 || !args[1].equals("-o")) {
            printUsage();
        }
        for (int i = 0; i < 2; i++) {
            fileNamelist[i] = args[i + 2];
            classlist[i] = new Vector<String>();
        }
        if (generateClassLists(args[0]) == true) {
            writeClassListToOutput();
        }
    }
    private static boolean generateClassLists(String inFileName) {
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(inFileName));
            boolean match = false;
            while (true) {
                String line = null;
                line = br.readLine();
                if (line == null) {
                    break;
                }
                if (line.length() == 0    ||
                    line.charAt(0) == '#') {
                    continue;
                }
                line = line.trim();
                if (!line.endsWith(".class")) {
                    classlist[1].add(line); 
                } else {
                    classlist[0].add(line); 
                }
            }
            br.close();
        } catch (FileNotFoundException e) {
            System.err.println("Can't find file \"" + inFileName + "\".");
            return false;
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(2);
        }
        return true;
    }
    private static void writeClassListToOutput() {
        try {
            for (int i = 0; i < fileNamelist.length; i++) {
                PrintStream out = new PrintStream(new FileOutputStream(fileNamelist[i]));
                for (int j = 0; j < classlist[i].size(); j++) {
                    out.println(classlist[i].elementAt(j));
                }
                out.flush();
                out.close();
            }
        } catch ( FileNotFoundException e ) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace(System.err);
            System.exit(3);
        }
    }
}
