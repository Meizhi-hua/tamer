    static final class clinit
    {
        static final boolean [] _CONDITIONAL_BRANCHES;
        static final boolean [] _COMPOUND_CONDITIONAL_BRANCHES;
        static final boolean [] _UNCONDITIONAL_BRANCHES;
        static final boolean [] _BRANCHES;
        static final int [] _NARROW_SIZE;
        static final int [] _WIDE_SIZE;
        static
        {
            final int opcodeCount = MNEMONICS.length;
            _CONDITIONAL_BRANCHES = new boolean [opcodeCount];
            _CONDITIONAL_BRANCHES [_ifeq] = true;
            _CONDITIONAL_BRANCHES [_iflt] = true;
            _CONDITIONAL_BRANCHES [_ifle] = true;
            _CONDITIONAL_BRANCHES [_ifne] = true;
            _CONDITIONAL_BRANCHES [_ifgt] = true;
            _CONDITIONAL_BRANCHES [_ifge] = true;
            _CONDITIONAL_BRANCHES [_ifnull] = true;
            _CONDITIONAL_BRANCHES [_ifnonnull] = true;
            _CONDITIONAL_BRANCHES [_if_icmpeq] = true;
            _CONDITIONAL_BRANCHES [_if_icmpne] = true;
            _CONDITIONAL_BRANCHES [_if_icmplt] = true;
            _CONDITIONAL_BRANCHES [_if_icmpgt] = true;
            _CONDITIONAL_BRANCHES [_if_icmple] = true;
            _CONDITIONAL_BRANCHES [_if_icmpge] = true;
            _CONDITIONAL_BRANCHES [_if_acmpeq] = true;
            _CONDITIONAL_BRANCHES [_if_acmpne] = true;
            _COMPOUND_CONDITIONAL_BRANCHES = new boolean [opcodeCount];
            _COMPOUND_CONDITIONAL_BRANCHES [_tableswitch] = true;
            _COMPOUND_CONDITIONAL_BRANCHES [_lookupswitch] = true;
            _UNCONDITIONAL_BRANCHES = new boolean  [opcodeCount];
            _UNCONDITIONAL_BRANCHES [_goto] = true;
            _UNCONDITIONAL_BRANCHES [_goto_w] = true;
            _UNCONDITIONAL_BRANCHES [_jsr] = true;
            _UNCONDITIONAL_BRANCHES [_jsr_w] = true;
            _UNCONDITIONAL_BRANCHES [_ret] = true;
            _UNCONDITIONAL_BRANCHES [_ireturn] = true;
            _UNCONDITIONAL_BRANCHES [_lreturn] = true;
            _UNCONDITIONAL_BRANCHES [_freturn] = true;
            _UNCONDITIONAL_BRANCHES [_dreturn] = true;
            _UNCONDITIONAL_BRANCHES [_areturn] = true;
            _UNCONDITIONAL_BRANCHES [_return] = true;
            _UNCONDITIONAL_BRANCHES [_athrow] = true;
            _BRANCHES = new boolean [opcodeCount];
            for (int o = 0; o < opcodeCount; ++ o)
                if (_CONDITIONAL_BRANCHES [o]) _BRANCHES [o] = true;
            for (int o = 0; o < opcodeCount; ++ o)
                if (_COMPOUND_CONDITIONAL_BRANCHES [o]) _BRANCHES [o] = true;
            for (int o = 0; o < opcodeCount; ++ o)
                if (_UNCONDITIONAL_BRANCHES [o]) _BRANCHES [o] = true;
            _NARROW_SIZE = new int [opcodeCount];
            for (int o = 0; o < opcodeCount; ++ o) _NARROW_SIZE [o] = 1;
            _NARROW_SIZE [_bipush] = 2;
            _NARROW_SIZE [_sipush] = 3;
            _NARROW_SIZE [_ldc] = 2;
            _NARROW_SIZE [_ldc_w] = 3;
            _NARROW_SIZE [_ldc2_w] = 3;
            _NARROW_SIZE [_iload] = 2;
            _NARROW_SIZE [_lload] = 2;
            _NARROW_SIZE [_fload] = 2;
            _NARROW_SIZE [_dload] = 2;
            _NARROW_SIZE [_aload] = 2;
            _NARROW_SIZE [_istore] = 2;
            _NARROW_SIZE [_lstore] = 2;
            _NARROW_SIZE [_fstore] = 2;
            _NARROW_SIZE [_dstore] = 2;
            _NARROW_SIZE [_astore] = 2;
            _NARROW_SIZE [_iinc] = 3;
            _NARROW_SIZE [_ifeq] = 3;
            _NARROW_SIZE [_ifne] = 3;
            _NARROW_SIZE [_iflt] = 3;
            _NARROW_SIZE [_ifge] = 3;
            _NARROW_SIZE [_ifgt] = 3;
            _NARROW_SIZE [_ifle] = 3;
            _NARROW_SIZE [_if_icmpeq] = 3;
            _NARROW_SIZE [_if_icmpne] = 3;
            _NARROW_SIZE [_if_icmplt] = 3;
            _NARROW_SIZE [_if_icmpge] = 3;
            _NARROW_SIZE [_if_icmpgt] = 3;
            _NARROW_SIZE [_if_icmple] = 3;
            _NARROW_SIZE [_if_acmpeq] = 3;
            _NARROW_SIZE [_if_acmpne] = 3;
            _NARROW_SIZE [_goto] = 3;
            _NARROW_SIZE [_jsr] = 3;
            _NARROW_SIZE [_ifnull] = 3;
            _NARROW_SIZE [_ifnonnull] = 3;
            _NARROW_SIZE [_ret] = 2;
            _NARROW_SIZE [_lookupswitch] = -1;   
            _NARROW_SIZE [_tableswitch] = 0;    
            _NARROW_SIZE [_getstatic] = 3;
            _NARROW_SIZE [_putstatic] = 3;
            _NARROW_SIZE [_getfield] = 3;
            _NARROW_SIZE [_putfield] = 3;
            _NARROW_SIZE [_invokevirtual] = 3;
            _NARROW_SIZE [_invokespecial] = 3;
            _NARROW_SIZE [_invokestatic] = 3;
            _NARROW_SIZE [_invokeinterface] = 5;
            _NARROW_SIZE [_new] = 3;
            _NARROW_SIZE [_checkcast] = 3;
            _NARROW_SIZE [_instanceof] = 3;
            _NARROW_SIZE [_newarray] = 2;
            _NARROW_SIZE [_anewarray] = 3;
            _NARROW_SIZE [_multianewarray] = 4;
            _NARROW_SIZE [_goto_w] = 5;
            _NARROW_SIZE [_jsr_w] = 5;
            _WIDE_SIZE = (int []) _NARROW_SIZE.clone ();
            _WIDE_SIZE [_iload] = 3;
            _WIDE_SIZE [_lload] = 3;
            _WIDE_SIZE [_fload] = 3;
            _WIDE_SIZE [_dload] = 3;
            _WIDE_SIZE [_aload] = 3;
            _WIDE_SIZE [_istore] = 3;
            _WIDE_SIZE [_lstore] = 3;
            _WIDE_SIZE [_fstore] = 3;
            _WIDE_SIZE [_dstore] = 3;
            _WIDE_SIZE [_astore] = 3;
            _WIDE_SIZE [_iinc] = 5;
            _WIDE_SIZE [_ret] = 3;
        }
    } 
} 
