public final class ProjectProperties {
    public final static String PROPERTY_TARGET = "target";
    public final static String PROPERTY_LIBRARY = "android.library";
    public final static String PROPERTY_LIB_REF = "android.library.reference.";
    public final static String PROPERTY_SDK = "sdk.dir";
    public final static String PROPERTY_SDK_LEGACY = "sdk-location";
    public final static String PROPERTY_APP_PACKAGE = "application.package";
    public final static String PROPERTY_APP_PACKAGE_LEGACY = "application-package";
    public final static String PROPERTY_SPLIT_BY_DENSITY = "split.density";
    public final static String PROPERTY_TESTED_PROJECT = "tested.project.dir";
    public final static String PROPERTY_BUILD_SOURCE_DIR = "source.dir";
    public static enum PropertyType {
        BUILD("build.properties", BUILD_HEADER),
        DEFAULT(SdkConstants.FN_DEFAULT_PROPERTIES, DEFAULT_HEADER),
        LOCAL("local.properties", LOCAL_HEADER);
        private final String mFilename;
        private final String mHeader;
        PropertyType(String filename, String header) {
            mFilename = filename;
            mHeader = header;
        }
        public String getFilename() {
            return mFilename;
        }
    }
    private final static String LOCAL_HEADER =
            "# This file is automatically generated by Android Tools.\n" +
            "# Do not modify this file -- YOUR CHANGES WILL BE ERASED!\n" +
            "# \n" +
            "# This file must *NOT* be checked in Version Control Systems,\n" +
            "# as it contains information specific to your local configuration.\n" +
            "\n";
    private final static String DEFAULT_HEADER =
           "# This file is automatically generated by Android Tools.\n" +
           "# Do not modify this file -- YOUR CHANGES WILL BE ERASED!\n" +
           "# \n" +
           "# This file must be checked in Version Control Systems.\n" +
           "# \n" +
           "# To customize properties used by the Ant build system use,\n" +
           "# \"build.properties\", and override values to adapt the script to your\n" +
           "# project structure.\n" +
           "\n";
    private final static String BUILD_HEADER =
           "# This file is used to override default values used by the Ant build system.\n" +
           "# \n" +
           "# This file must be checked in Version Control Systems, as it is\n" +
           "# integral to the build system of your project.\n" +
           "\n" +
           "# This file is only used by the Ant script.\n" +
           "\n" +
           "# You can use this to override default values such as\n" +
           "#  'source.dir' for the location of your java source folder and\n" +
           "#  'out.dir' for the location of your output folder.\n" +
           "\n" +
           "# You can also use it define how the release builds are signed by declaring\n" +
           "# the following properties:\n" +
           "#  'key.store' for the location of your keystore and\n" +
           "#  'key.alias' for the name of the key to use.\n" +
           "# The password will be asked during the build when you use the 'release' target.\n" +
           "\n";
    private final static Map<String, String> COMMENT_MAP = new HashMap<String, String>();
    static {
        COMMENT_MAP.put(PROPERTY_TARGET,
                "# Project target.\n");
        COMMENT_MAP.put(PROPERTY_SPLIT_BY_DENSITY,
                "# Indicates whether an apk should be generated for each density.\n");
        COMMENT_MAP.put(PROPERTY_SDK,
                "# location of the SDK. This is only used by Ant\n" +
                "# For customization when using a Version Control System, please read the\n" +
                "# header note.\n");
        COMMENT_MAP.put(PROPERTY_APP_PACKAGE,
                "# The name of your application package as defined in the manifest.\n" +
                "# Used by the 'uninstall' rule.\n");
    }
    private final String mProjectFolderOsPath;
    private final Map<String, String> mProperties;
    private final PropertyType mType;
    public static ProjectProperties load(String projectFolderOsPath, PropertyType type) {
        File projectFolder = new File(projectFolderOsPath);
        if (projectFolder.isDirectory()) {
            File defaultFile = new File(projectFolder, type.mFilename);
            if (defaultFile.isFile()) {
                Map<String, String> map = SdkManager.parsePropertyFile(defaultFile, null );
                if (map != null) {
                    return new ProjectProperties(projectFolderOsPath, map, type);
                }
            }
        }
        return null;
    }
    public synchronized ProjectProperties merge(PropertyType type) {
        File projectFolder = new File(mProjectFolderOsPath);
        if (projectFolder.isDirectory()) {
            File defaultFile = new File(projectFolder, type.mFilename);
            if (defaultFile.isFile()) {
                Map<String, String> map = SdkManager.parsePropertyFile(defaultFile, null );
                if (map != null) {
                    for(Entry<String, String> entry : map.entrySet()) {
                        String key = entry.getKey();
                        String value = entry.getValue();
                        if (!mProperties.containsKey(key) && value != null) {
                            mProperties.put(key, value);
                        }
                    }
                }
            }
        }
        return this;
    }
    public static ProjectProperties create(String projectFolderOsPath, PropertyType type) {
        return new ProjectProperties(projectFolderOsPath, new HashMap<String, String>(), type);
    }
    public PropertyType getType() {
        return mType;
    }
    public synchronized void setProperty(String name, String value) {
        mProperties.put(name, value);
    }
    public synchronized String getProperty(String name) {
        return mProperties.get(name);
    }
    public synchronized String removeProperty(String name) {
        return mProperties.remove(name);
    }
    public synchronized Set<String> keySet() {
        return new HashSet<String>(mProperties.keySet());
    }
    public synchronized void reload() {
        File projectFolder = new File(mProjectFolderOsPath);
        if (projectFolder.isDirectory()) {
            File defaultFile = new File(projectFolder, mType.mFilename);
            if (defaultFile.isFile()) {
                Map<String, String> map = SdkManager.parsePropertyFile(defaultFile, null );
                if (map != null) {
                    mProperties.clear();
                    mProperties.putAll(map);
                }
            }
        }
    }
    public synchronized void save() throws IOException {
        File toSave = new File(mProjectFolderOsPath, mType.mFilename);
        OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(toSave),
                SdkConstants.INI_CHARSET);
        writer.write(mType.mHeader);
        for (Entry<String, String> entry : mProperties.entrySet()) {
            String comment = COMMENT_MAP.get(entry.getKey());
            if (comment != null) {
                writer.write(comment);
            }
            String value = entry.getValue();
            if (value != null) {
                value = value.replaceAll("\\\\", "\\\\\\\\");
                writer.write(String.format("%s=%s\n", entry.getKey(), value));
            }
        }
        writer.close();
    }
    private ProjectProperties(String projectFolderOsPath, Map<String, String> map,
            PropertyType type) {
        mProjectFolderOsPath = projectFolderOsPath;
        mProperties = map;
        mType = type;
    }
}
