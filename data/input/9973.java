public class CheckWeakKeys {
    static private byte [][] weakKeys = {
        { (byte)0xE0, (byte)0x01, (byte)0xE0, (byte)0x01,
          (byte)0xF1, (byte)0x01, (byte)0xF1, (byte)0x01 },
        { (byte)0x01, (byte)0xE0, (byte)0x01, (byte)0xE0,
          (byte)0x01, (byte)0xF1, (byte)0x01, (byte)0xF1 },
        { (byte)0xFE, (byte)0x1F, (byte)0xFE, (byte)0x1F,
          (byte)0xFE, (byte)0x0E, (byte)0xFE, (byte)0x0E },
        { (byte)0x1F, (byte)0xFE, (byte)0x1F, (byte)0xFE,
          (byte)0x0E, (byte)0xFE, (byte)0x0E, (byte)0xFE },
        { (byte)0xE0, (byte)0x1F, (byte)0xE0, (byte)0x1F,
          (byte)0xF1, (byte)0x0E, (byte)0xF1, (byte)0x0E },
        { (byte)0x1F, (byte)0xE0, (byte)0x1F, (byte)0xE0,
          (byte)0x0E, (byte)0xF1, (byte)0x0E, (byte)0xF1 },
        { (byte)0x01, (byte)0xFE, (byte)0x01, (byte)0xFE,
          (byte)0x01, (byte)0xFE, (byte)0x01, (byte)0xFE },
        { (byte)0xFE, (byte)0x01, (byte)0xFE, (byte)0x01,
          (byte)0xFE, (byte)0x01, (byte)0xFE, (byte)0x01 },
        { (byte)0x01, (byte)0x1F, (byte)0x01, (byte)0x1F,
          (byte)0x01, (byte)0x0E, (byte)0x01, (byte)0x0E },
        { (byte)0x1F, (byte)0x01, (byte)0x1F, (byte)0x01,
          (byte)0x0E, (byte)0x01, (byte)0x0E, (byte)0x01 },
        { (byte)0xE0, (byte)0xFE, (byte)0xE0, (byte)0xFE,
          (byte)0xF1, (byte)0xFE, (byte)0xF1, (byte)0xFE },
        { (byte)0xFE, (byte)0xE0, (byte)0xFE, (byte)0xE0,
          (byte)0xFE, (byte)0xF1, (byte)0xFE, (byte)0xF1 },
        { (byte)0x01, (byte)0x01, (byte)0x01, (byte)0x01,
          (byte)0x01, (byte)0x01, (byte)0x01, (byte)0x01 },
        { (byte)0xFE, (byte)0xFE, (byte)0xFE, (byte)0xFE,
          (byte)0xFE, (byte)0xFE, (byte)0xFE, (byte)0xFE },
        { (byte)0xE0, (byte)0xE0, (byte)0xE0, (byte)0xE0,
          (byte)0xF1, (byte)0xF1, (byte)0xF1, (byte)0xF1 },
        { (byte)0x1F, (byte)0x1F, (byte)0x1F, (byte)0x1F,
          (byte)0x0E, (byte)0x0E, (byte)0x0E, (byte)0x0E }
    };
    public static void main(String[] args) throws Exception {
        boolean failed = false;
        for (int i = 0; i < weakKeys.length; i++) {
            DESKeySpec desSpec = new DESKeySpec(weakKeys[i]);
            if (!DESKeySpec.isWeak(weakKeys[i], 0)) {
                failed = true;
                System.out.println("Entry " + i + " should be weak");
            }
        }
        if (failed) {
            throw new Exception("Failed test!!!");
        }
        System.out.println("Passed test.");
    }
}
