    void updateDatasetTags(int datasetId, String classification, HashMap<String, Boolean> dataTypes);
    int insertDataset(Dataset dataset);
    void insertDatasetMetas(List<DatasetMeta> datasetMetas);
    List<DatasetAttribute> findDatasetAttributes(int datasetId);
    int insertDatasetAttributes(List<DatasetAttribute> datasetAttributes);
    void createDatasetAttributesTable(int datasetId);
    void createDatasetDirectoriesTable(int datasetId);
    void createCoveragesTable(int datasetId);
    @PostFilter("hasPermission(filterObject, 'read') or hasRole('ROLE_ADMINISTRATOR')")
    List<Dataset> getDatasets(int categoryId);
    void updateDatasetMeta(DatasetMeta datasetMeta);
    boolean deleteDataset(int datasetId);
    List<AnzsrcCode> findAnzsrcCodes(int datasetId);
    List<BlockedUrl> findBlockedUrls(int datasetId);
    List<RelatedParty> findRelatedParties(int datasetId);
    List<RelatedInformation> findRelatedInformation(int datasetId);
    List<RelatedDataset> findRelatedDataset(int datasetId);
    List<Subject> findDatasetSubject(int id);
    void replaceDatasetSubject(List<Subject> subject, int datasetId);
    int createDataset(String datasetName, int categoryId);
    void replaceAnzsrcCodes(List<AnzsrcCode> codes, int datasetId);
    void replaceBlockedUrls(List<BlockedUrl> blockedUrls, int datasetId);
    void replaceRelatedParties(List<RelatedParty> relatedParties, int datasetId);
    void replaceRelatedInformation(List<RelatedInformation> relatedInformation, int datasetId);
    void replaceRelatedDataset(List<RelatedDataset> related, int datasetId);
    List<RelatedParty> findRelatedPartiesUsingParty(PartyOrganisation party);
    List<RelatedParty> findRelatedPartiesUsingParty(PartyIndividual party);
    void updateDataset(Dataset dataset, List<DatasetMeta> datasetMetas);
    void createFileAttributesTable(int datasetId);
    void createAttributeDataTable(int datasetId);
    void updateDatasetCoverage(DatasetCoverage datasetCoverage);
    void insertDatasetCoverage(DatasetCoverage datasetCoverage);
}
