public class GroupEJB implements SessionBean {
    private static Logger logger = Logger.getLogger(GroupEJB.class);
    protected javax.ejb.SessionContext ctx;
    protected Context environment;
    private String dataSource = "";
    public GroupEJB() {
    }
    public void ejbCreate() {
    }
    public void ejbRemove() {
    }
    public void ejbActivate() {
    }
    public void ejbPassivate() {
    }
    public void setSessionContext(SessionContext ctx) {
        this.ctx = ctx;
    }
    public Vector getGroupMemberIDs(int userID, int groupId) {
        Vector v = new Vector();
        CVDal dl = new CVDal(dataSource);
        try {
            dl.setSql("contact.listgroupmembers");
            dl.setInt(1, groupId);
            Collection col = dl.executeQuery();
            Iterator it = col.iterator();
            while (it.hasNext()) {
                HashMap hm = (HashMap) it.next();
                v.addElement(hm.get("childid"));
            }
        } catch (Exception e) {
            logger.error("[getGroupMemberIDs]: Exception", e);
        } finally {
            dl.destroy();
        }
        return v;
    }
    public void addContactToGroup(int userId, int[] contactId, int groupId) {
        CVDal dl = new CVDal(dataSource);
        try {
            for (int i = 0; i < contactId.length; i++) {
                dl.setSql("contact.createmember");
                dl.setInt(1, groupId);
                dl.setInt(2, contactId[i]);
                dl.executeUpdate();
                dl.clearParameters();
            }
        } catch (Exception e) {
            logger.error("[addContactToGroup]: Exception", e);
        } finally {
            dl.destroy();
        }
    }
    public void deleteContactFromGroup(int[] contactId, int groupId) {
    }
    public int createGroup(int userId, GroupVO groupDetail) {
        CVDal dl = new CVDal(dataSource);
        int gid = 0;
        try {
            dl.setSqlQuery("INSERT INTO grouptbl(Name,description, owner, createDate, modifyDate) values(?,?,?,NOW(),NOW())");
            dl.setString(1, groupDetail.getGroupName());
            dl.setString(2, groupDetail.getDescription());
            dl.setInt(3, groupDetail.getOwner());
            dl.executeUpdate();
            gid = dl.getAutoGeneratedKey();
            InitialContext ic = CVUtility.getInitialContext();
            AuthorizationLocalHome authorizationHome = (AuthorizationLocalHome) ic.lookup("local/Authorization");
            AuthorizationLocal authorizationLocal = authorizationHome.create();
            authorizationLocal.setDataSource(dataSource);
            authorizationLocal.saveCurrentDefaultPermission("Group", gid, userId);
        } catch (Exception e) {
            logger.error("[createGroup]: Exception", e);
        } finally {
            dl.destroy();
        }
        return gid;
    }
    public GroupVO getGroupDetails(int userId, int groupId) {
        GroupVO group = null;
        CVDal dl = new CVDal(dataSource);
        try {
            dl.setSqlQuery("select GroupID,Description,Name , owner , createDate ,modifyDate  from grouptbl where groupid = ?");
            dl.setInt(1, groupId);
            Collection col = dl.executeQuery();
            if (col != null) {
                HashMap hm = (HashMap) col.iterator().next();
                group = new GroupVO();
                group.setGroupID(((Long) hm.get("GroupID")).intValue());
                group.setGroupName((String) hm.get("Name"));
                group.setDescription((String) hm.get("Description"));
                Object ownerObject = hm.get("owner");
                if (ownerObject != null) {
                    String newOwnerString = ownerObject.toString();
                    group.setOwner(Integer.parseInt(newOwnerString));
                }
                group.setCreatedate((java.util.Date) hm.get("createDate"));
                group.setModifydate((java.util.Date) hm.get("modifyDate"));
            }
        } catch (Exception e) {
            logger.error("[getGroupDetails]: Exception", e);
        } finally {
            dl.destroy();
        }
        return group;
    }
    public void updateGroup(int userId, GroupVO groupDetail) {
        CVDal dl = new CVDal(dataSource);
        try {
            dl.setSqlQuery("update grouptbl set name = ?  ,description = ? , owner = ? , modifyDate=concat(CURRENT_DATE,CURRENT_TIME)  where groupid = ? ");
            dl.setString(1, groupDetail.getGroupName());
            dl.setString(2, groupDetail.getDescription());
            dl.setInt(3, groupDetail.getOwner());
            dl.setInt(4, groupDetail.getGroupID());
            dl.executeUpdate();
        } catch (Exception e) {
            logger.error("[updateGroup]: Exception", e);
        } finally {
            dl.destroy();
        }
    }
    public void deleteGroup(int groupId) {
        CVDal dl = new CVDal(dataSource);
        try {
            dl.setSql("contact.deletegroupmember");
            dl.setInt(1, groupId);
            dl.executeUpdate();
            dl.setSqlQueryToNull();
            dl.setSql("contact.deletegroup");
            dl.setInt(1, groupId);
            dl.executeUpdate();
        } catch (Exception e) {
            logger.error("[deleteGroup]: Exception", e);
        } finally {
            dl.destroy();
        }
    }
    public void deleteGroupMember(int groupid, int memberId) {
        CVDal dl = new CVDal(dataSource);
        try {
            dl.setSql("contact.deleteselectedgroupmember");
            dl.setInt(1, groupid);
            dl.setInt(2, memberId);
            dl.executeUpdate();
        } catch (Exception e) {
            logger.error("[deleteGroupMember]: Exception", e);
        } finally {
            dl.destroy();
        }
    }
    public int duplicateGroup(int individualID, int groupID) {
        int newGroupID = 0;
        try {
            GroupVO originGroupVO = this.getGroupDetails(individualID, groupID);
            GroupVO newGroupVO = new GroupVO();
            newGroupVO.setGroupName(originGroupVO.getGroupName());
            newGroupVO.setDescription(originGroupVO.getDescription());
            newGroupVO.setOwner(individualID);
            newGroupID = this.createGroup(individualID, newGroupVO);
            if (newGroupID != 0) {
                Vector groupMembers = this.getGroupMemberIDs(individualID, groupID);
                if (groupMembers != null) {
                    Iterator it = groupMembers.iterator();
                    int memberArray[] = new int[groupMembers.size()];
                    int i = 0;
                    while (it.hasNext()) {
                        memberArray[i] = ((Long) it.next()).intValue();
                        i++;
                    }
                    this.addContactToGroup(individualID, memberArray, newGroupID);
                }
            }
        } catch (Exception e) {
            logger.error("[duplicateGroup]: Exception", e);
        }
        return (newGroupID);
    }
    public void setDataSource(String ds) {
        this.dataSource = ds;
    }
}
